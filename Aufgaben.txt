1.01:
-------
Textausgabe auf der Konsole
Erweitern Sie das Programm, sodass es "Hallo, Welt!" ausgibt.

#include <stdio.h>

int main() {
  
  return 0;
}

1.02:
-------
Fehlerbehebung
Verändern Sie den nebenstehenden Code derart, sodass er keine Fehler mehr ausgibt. In der vorgegebenen Form ist dieser Code nicht übersetzbar.

#include <stdio.h>

int main() {
  Printf("Hallo");
  PRINTF("Welt");
  
  return 0;
}

1.03:
-------
Steuerzeichen
Erweitern Sie das Programm derart, sodass zwischen den Worten "Hallo" und "Welt" ein Zeilenumbruch ausgegeben wird.

#include <stdio.h>

int main() {
  printf("Hallo Welt!");
  
  return 0;

1.04:
-------
Formatierung
Verändern Sie den Aufruf von "printf" derart, sodass die beiden Variablen a und b nebeneinander ausgegeben werden. Die Variablen sollen bei der Ausgabe mit einem Leerzeichen getrennt werden.}

#include <stdio.h>

int main() {
  int a = 17;
  double b = 33.31;
  
  printf(a , b);
  
  return 0;
}

1.05:
-------
Verwendung von Platzhaltern
Verändern Sie das nebenstehende Programm derart, sodass folgender Text ausgegeben wird:

"Die HSHL hat etwa 4500 Studierende und rund 70 Professoren."

Hinweis:
Verwenden Sie bei den unterstrichenen Zahlen die vorgegebenen Variablen!

#include <stdio.h>

int main() {
  int anzahlStudierende = 4500;
  int anzahlProfessoren = 70;
  
  printf();
  return 0;
}

1.06:
-------
Eingebetteter Ausdruck
Erweitern Sie die printf-Funktion derart, sodass die Summe aus den Variablen a und b ausgerechnet und ausgegeben wird.
Hinweis:
Bearbeiten Sie nur die angegebene Zeile (7) im Code!

#include <stdio.h>

int main() {
  int a = 17;
  int b = 4;
  
  printf("%i", ); //Diese Zeile bearbeiten
  
  return 0;
}

1.07:
-------
Funktionsaufrufe
Erweitern Sie das Programm so, dass die folgenden mathematischen Funktionen ausgerechnet und in der angegebenen Reihenfolge ausgeben werden:

Sinus von 2.6: (double)
Arkustangens von -3.8: (double)
Exponentialfunktion von 4: (double)
natürlicher Logarithmus von 11: (double)
binärer Logarithmus von 7: (double)
Wurzel aus 24: (double)
absoluter Wert von -55: (int)

Hinweis:
Erweitern Sie die Ausgabe um die Ergebnisse der jeweiligen Rechnung.

Nutzen Sie zur Hilfestellung die Referenz der "math.h"-Bibliothek unter
http://www.cplusplus.com/reference/cmath

#include <stdio.h>
#include <math.h>
#include <stdlib.h>

int main() {
  //Erweitern Sie hier den Quelltext
  
  printf("Sinus von 2.6: \n");
  printf("Arkustangens von -3.8: \n");
  printf("Exponentialfunktion von 4: \n");
  printf("natürlicher Logarithmus von 11: \n");
  printf("binärer Logarithmus von 7: \n");
  printf("Wurzel aus 24: \n");
  printf("absoluter Wert von -55: ");
  
  return 0;
}

1.07:


2.01:
-------
Globale Variablen
Eine internationale Bank hat einem Praktikanten versehentlich das Kennwort für die hauseigene  Kredit-Berechnungs-Software gegeben. Leider hatte dieser Praktikant während der Programmiervorlesung nicht richtig aufgepasst und bevor er sich versah, löschte er unglücklicherweise eine Zeile der so wichtigen Finanzsoftware. Nach einiger Analyse konnte man den Fehler zwar ausfindig  machen, jedoch nicht beheben.
Nun müssen Sie die das Programm wieder zum Laufen bringen!
Hinweise:
- Der korrekte Wert des Zinssatzes liegt bei 2,7%.
- Zur Lösung der Aufgabe soll eine globale Variable verwendet werden.

Eine globale Variable kann von jedem Ort im Programm gelesen und beschrieben werden. Sie ist also global sichtbar.
Um eine Variable global anzulegen, darf sie nicht in einem Programmblock (also innerhalb von { } ) deklariert werden.

#include <stdio.h>

//Hier fehlt etwas

//

int main() {
  double Kredit;
  scanf("%lf", &Kredit);
  printf("Kredit: %.2f Euro ", Kredit);
  
  double JahresZinsen = Kredit * (ZinsSatz/100);
  printf("Jahreszinsen: %.2f Euro", JahresZinsen);
  
  return 0;
}

2.02:
-------
Konstanten
Verändern Sie das Programm derart, sodass es fehlerfrei übersetzt werden kann.

Hinweis:
Die mathematische Konstante ist ca. 3.142.

#include <stdio.h>

int main() {
  // Irgendetwas fehlt hier:
  
  double radius = 5;
  double flaeche = radius * radius * PI;
  printf("%f", flaeche);
  
  return 0;
}

2.03:
-------
Variablennamen
Verändern Sie das Programm, damit jeder Spieler seine eindeutigen Lebenspunkte erhält.

#include <stdio.h>

int main() {
  int spielerLeben = 38; //Leben Spieler 1
  int spielerLeben = 21; //Leben Spieler 2
  int spielerLeben = 59; //Leben Spieler 3
  
  printf("Leben Spieler 1: %i\n", spielerLeben); //Ausgabe Leben Spieler 1
  printf("Leben Spieler 2: %i\n", spielerLeben); //Ausgabe Leben Spieler 2
  printf("Leben Spieler 3: %i\n", spielerLeben); //Ausgabe Leben Spieler 3
  
  return 0;
}

2.04:
-------
Tausch von Speicherinhalten
Ergänzen Sie das Programm, sodass die beiden Variablen a und b die Werte tauschen.
Verändern Sie dazu nicht den Aufruf von printf oder von scanf!

Beispiel:
a = 4 und b = 7
werden zu
a = 7 und b = 4

#include <stdio.h>

int main() {
  int a;
  int b;
  scanf("%d", &a);
  scanf("%d", &b);
  //Fügen Sie hier den Code ein
  
  //
  printf("a = %i; b = %i", a,b);
  return 0;
}

2.05:
-------
Variablen verändern
Verändern Sie die Funktion derart, sodass die Variable a um den Wert 10 erhöht und die Variable b um den Wert 1 dekrementiert wird.

Definieren Sie KEINE(!!) neuen Variablen, sondern arbeiten Sie mit den bestehenden.

Beispiel 1:
a = 5 --> 15;
b = 6 --> 5;

Beispiel 2:
a = 37 --> 47;
b = 22 --> 21;

#include <stdio.h>

int main() {
  int a;
  int b;
  scanf("%i", &a);
  scanf("%i", &b);
  //Fügen Sie hier Ihren Quelltext ein
  
  //
  printf("%i %i", a, b);
  return 0;
}

2.06:
-------
Flächeninhalt berechnen
Erweitern Sie das Programm derart, sodass Sie aus der Variable radius den Flächeninhalt eines Kreises ausrechnen können

Geben Sie anschließen nur den Flächeninhalt mittels der prinft-Funktion aus.

#include <stdio.h>

int main() {
  double radius;
  scanf("%lf", &radius);
  const double pi = 3.1415926535897932384626433832795;
  //Fügen Sie hier ihren Code ein
  
  //
  return 0;
}

2.07:
-------
Typumwandlung
Verändern Sie das Programm derart, sodass die Variable ergebnis (double) den Quotienten aus zaehler (int) und nenner (int) speichert.

Hinweise:
Erweitern Sie nur die Zeile 7!

#include <stdio.h>

int main() {
  int zaehler = 7;
  int nenner = 3;
  //Erweitern Sie den Code in der nachfolgenden Zeile
  double ergebnis = 
  //
  printf("%i/%i = %f", zaehler, nenner, ergebnis);
  
  return 0;
}

2.08:
-------
Temperaturumrechnung
Schreiben Sie ein Programm, welches eine Temperatur in Celsius nach Fahrenheit umrechnet.

Benutzen Sie folgende Formel zur Umrechnung:
°F = °C * 1.8 + 32

Geben Sie anschließend den berechneten Wert mithilfe von printf aus.

#include <stdio.h>

int main() {
  double celsius;
  scanf("%lf", &celsius);
  //Fügen Sie ab hier ihren Code ein
  
  //
  printf(/*Fügen Sie hier die Ausgabe ein*/);
  return 0;
}

3.01:
------
Einlesen von der Konsole
Erweitern Sie das Programm um eine scanf-Funktion, die zwei Zahlen a (int) und b (int) einliest. Geben Sie anschließend die Summe der beiden Zahlen aus.

#include <stdio.h>

int main() {
  int a = 0;
  int b = 0;
  
  //Nachfolgend Quelltext einfügen
  
  //
  
  return 0;
}

3.02:
------
Platzhalter für scanf
Erweitern Sie das nebenstehende Programm um eine scanf-Funktion, welche sowohl a (int) als auch b (double) einliest. Geben Sie anschließend das Produkt der beiden Zahlen aus.

#include <stdio.h>

int main() {
  int a = 0;
  double b = 0;
  
  //Nachfolgend Quelltext einfügen
  
  //
  
  return 0;
}

3.03:
------
Kraftstoffberechnung
In der Vorlesung besprachen wir das Beispiel mit der Kraftstoffberechnung bei Fahrzeugen.

Das vorgegebene Programm setzt sich ebenfalls mit diesem Thema auseinander. Jedoch ist dieses Programm fehlerhaft.

Finden und verbessern Sie alle Fehler!

#include <stdio.h>

int main() {
  double _km_gefahren 0;
  double verbrauch_pro_100km  = 0
  scan("%f" verbrauch_pro_100km);
  scan("%i" kmgefahren);
  
  double gesamter_verbrauch = km_gefahren * 100 * verbrauch_pro 100km;
  printf("Kraftstoffverbrauch bei %f gefahrenen Kilometern und einem Verbrauch von %f Litern: %f l.",kilometer_gefahren,verbrauch_pro_100km, verbrauch_gesamt);
  
  return 0;
}

3.04:
------
Boolesche Variablen
Erstellen Sie zwei Variablen ist_wahr mit dem Wert true und ist_falsch mit dem Wert false, welche anschließend mit einem Leerzeichen getrennt ausgegeben werden.

#include <stdio.h>

int main() {
  
  return 0;
}

3.05:
------
Bedingungen
Erweitern Sie das gegebene Programm um die folgende Logik:
Lesen Sie eine Zahl in die Variable zahl ein.
Wenn die Zahl größer oder gleich 10 ist, soll die Variable zustand auf true gesetzt werden, ansonsten auf false.
Nutzen Sie eine if-Anweisung.
Anschließend soll der Inhalt der Variable zustand ausgegeben werden.

#include <stdio.h>

int main() {
  int zahl;
  bool zustand;
  
  //Fügen Sie hier den Code ein
  
  //
  
  return 0;
}

3.06:
------
Bedingungen
Es soll eine Ganzzahl vom Benutzer eingelesen werden. Anschließend soll in der Variable absolutwert der zugehörige Absolutwert gespeichert werden.

Benutzen Sie den ternären Bedingungsoperator ?: .

Der Bedingungsoperator wird in der Vorlesung zu Auswahlanweisungen näher erklärt.

#include <stdio.h>

int main() {
  int zahl;
  scanf("%i", &zahl);
  
  //Hier Ihre Lösung
  int absolutwert = 
  
  printf("%i", absolutwert);
  
  return 0;
}

3.07:
------
Nettogehalt berechnen
Das nebenstehende Programm soll so vervollständigt werden, dass nach gegebenen Regeln aus dem Bruttogehalt die zu zahlenden Steuern und eine Einzahlung für das Sparbuch berechnet wird. Die Ergebnisse sollen entsprechend in den Variablen Nettogehalt, Steuern und Sparbuch abgelegt werden. 
Berechnungsregeln:

Wenn das Bruttogehalt unter 450€ liegt, werden keine Steuern  gezahlt und 10% auf das Sparbuch überwiesen.
Für höhere Gehälter gilt:  
Die Steuern liegen bei 19%.
Wenn nach Abzug der Steuern noch ein Gehalt von  mindestens 1200€ vorhanden ist, liegt die Sparquote  bei 15%, zwischen 600€ und 1200€ werden 10% gespart und bei  weniger als 600€ nur 5%.

Bitte beachten: Das Nettogehalt ist das Bruttogehalt abzüglich der Steuern und der Überweisungen auf das Sparbuch. 

#include <stdio.h>

int main() {
    double Bruttogehalt = 0;
    double Nettogehalt = 0;
    double Steuern = 0;
    double Sparbuch = 0;
    scanf("%lf", &Bruttogehalt);
    
    //Fügen Sie hier den Code ein
    
    //
    
    printf("Nettogehalt: %.2f Euro, Steuern: %.2f Euro, Sparbuch: %.2f Euro",Nettogehalt,Steuern,Sparbuch);

  return 0;
}

3.08:
------
Notenstufen
Sie haben die Aufgabe, ähnlich zur Vorlesung, ein Bewertungsprogramm für Klausuren zu schreiben. Allerdings soll dieses Mal die Note des Prüflings ausgegeben werden.
Der Prüfling erhält eine 4.0, wenn er mindestens 50% der  Maximalpunkte erhalten hat. Für jede Punkteverbesserung um 5% verbessert sich  die Note um eine Stufe, d.h. 55% ergibt  eine 3.7, 60% eine 3.3 usw.
Vervollständigen Sie das folgende Programm. Verwenden Sie geeignete if-Anweisungen, um die Variable note mit den korrekten Werten zu belegen.

Hinweis:
Geben Sie nur die Note aus ohne die Ausgabe zu modifizieren.

#include <stdio.h>

int main() {
  double max_punkte = 0;
  scanf("%lf", &max_punkte);
  double punkte_pruefling = 0;
  scanf("%lf", &punkte_pruefling);
  double note = 5;
  
  //Fügen Sie den Code hier ein
  
  //
  
  printf("%f", note);
  return 0;
}

3.09:
------
Verbundene Bedingungen
Vereinfachen Sie die if-Anweisungen, sodass nur eine einzige if-Anweisung übrig bleibt.
Achten Sie darauf die Funktionalität des Programms nicht zu verändern!

#include <stdio.h>

int main() {
  int a, b, c;
  bool result = false;
  scanf("%i %i %i", &a, &b ,&c);
  /*Ab hier verändern
  if(a > 100) {
    if(2 * b < 30) {
      if (!c) {
        result = true;
      }
    }
  }
  */
  printf("%i", result);
  return 0;
}

3.10:
------
Switch-Anweisungen
Überführen Sie das gegebene if-else-Konstrukt in eine switch-case-Anweisung.

#include <stdio.h>

int main() {
  double a, b;
  char c;
  scanf("%lf %lf %c", &a, &b, &c);
  /* Ab hier verändern
  if(c == '+') {
      printf("%f", a + b);
  } else if (c == '-') {
      printf("%f", a - b);
  } else if (c == '*') {
      printf("%f", a * b);
  } else if (c == '/') {
      printf("%f", a / b);
  } else
      printf("%c ist kein Operator", c);
  */
  return 0;
}

3.11:
------
Schaltjahrberechnung
Vervollständigen Sie das Programm, welche eine Jahreszahl einliest und prüft, ob es ein Schaltjahr ist, oder nicht.

Die Regeln für Schaltjahre sind unter folgendem Link nachlesbar:
https://de.wikipedia.org/wiki/Schaltjahr#Gregorianischer_Kalender

Bei einem Schaltjahr soll ausgegeben werden:
(Jahreszahl) ist ein Schaltjahr

Bei jedem anderen Jahr soll ausgegeben werden:
(Jahreszahl) ist kein Schaltjahr

*(Jahreszahl) soll durch die eingegebene Jahreszahl ersetzt werden.

#include <stdio.h>

int main() {
  int jahr = 0;
  scanf("%i", &jahr);
  bool ist_schaltjahr = false;
  
  //Fügen Sie hier ihren Code ein
  
  //
  return 0;
}

3.12:
------
Tarifrechner
Schreiben Sie ein Programm, welches zunächst die monatlichen Gesprächsminuten einliest und aus diesen anschließend die Kosten für drei Handytarife ausrechnet.

Beachten Sie dabei die folgenden Tarifarten:

Tarif 1: Flatrate für 40€ im Monat
Tarif 2: 20 Inklusivminuten für 10€ pro Monat + 10 Cent pro Minute
Tarif 3: Keine Grundgebühr und 20 Cent pro Minute

Anschließend soll die printf-Funktion um die Variablen erweitert werden.

#include <stdio.h>

int main() {
  //Quellcode ab hier
  
  //
  printf("Minuten: %i. Tarif 1: %.2f Euro. Tarif 2: %.2f Euro. Tarif 3: %.2f Euro\n",);
  return 0;
}

3.13:
------
Vergleichen
Vervollständigen Sie das nebenstehende Programm, um eine eingelesene Zahl gegen einen Vergleichswert zu prüfen.

Lesen Sie eine Zahl in die Variable eingabe ein.
Vergleichen Sie den eingegebenen Wert mit dem VERGLEICHSWERT.
Geben Sie aus, welcher Fall zutrifft:
die Zahl ist kleiner als der VERGLEICHSWERT
die Zahl ist gleich oder groesser als der VERGLEICHSWERT

Beispiel 1:
double eingabe = 3.83;
Ausgabe: "3.830000 ist kleiner als 5"

Beispiel 2:
double eingabe = 17.882;
Ausgabe: "17.882000 ist gleich oder groesser als 5"

#include <stdio.h>

const int VERGLEICHSWERT = 5;

int main() {
  double eingabe;
  //Setzen Sie ab hier den Quellcode ein
  
  //
  return 0;
}

4.01:
------
Verwendung einer while-Schleife
Erstellen Sie eine while-Schleife, welche die Summe aller natürlichen Zahlen bis einschließlich 100 berechnet und in der Variable result speichert.

#include <stdio.h>

int main() {
  int result = 0;
  int max = 100;
  //Quelltext ab hier

  //
  printf("%i", result);
  return 0;
}

4.02:
------
Einlesen mit einer Schleife
Schreiben Sie ein Programm, dass solange int-Zahlen einliest, bis die eingelesene Zahl zwischen 5 und 10 liegt (5 und 10 eingeschlossen).

Die eingelesenen Zahlen sollen zur Kontrolle durch ein Leerzeichen getrennt ausgegeben werden.

#include <stdio.h>

int main() {
  //Quelltext ab hier
  
  //
  return 0;
}

4.03:
------
Summe bis zu einer gegebenen Grenze berechnen
Schreiben Sie ein Programm, welches die Summe aller Zahlen bis einschließlich der eingegebenen Grenze bestimmt, die durch 3 oder 5 teilbar sind.

Geben Sie diese Summe aus.

#include <stdio.h>

int main() {
  int grenze = 0;
  scanf("%i", &grenze);
  
  //Quelltext ab hier
  
  //
  
  return 0;
}

4.04:
------
for-Schleife
Korrigieren Sie das Programm, welches die Zahlen von 1 bis 10 (inklusive) aufsteigend mit einem Leerzeichen getrennt auf der Konsole in einer Zeile ausgeben soll.

#include <stdio.h>

int main() {
  
  for(i;i++,i>10);{
      printf("%i ",i);
  }
  
  return 0;
}

4.05:
------
Einfacher Primzahltest
Schreiben Sie ein Programm, welches eine Zahl einliest und prüft, ob diese eine Primzahl ist.

Für jede Primzahl soll eine 1 ausgegeben werden, für alle anderen Zahlen soll eine 0 ausgegeben werden.

#include <stdio.h>

int main() {
  //Quelltext ab hier
  
  //
  return 0;
}

4.06:
------
Dezimalstellen erkennen
Schreiben Sie ein Programm, welches eine Zahl (int) einliest und ausgibt, wie viele Dezimalstellen diese Zahl besitzt.

#include <stdio.h>

int main() {
  int zahl;
  int dezStellen = 0;
  scanf("%i", &zahl);
  //Quelltext ab hier
  
  //
  return 0;
}

4.07:
------
Erkennen einer Binärzahl
In der Variable bzahl wird eine Zahl eingelesen. Prüfen Sie, ob dies eine Binärzahl bestehend aus 0 und 1 ist und belegen Sie die Variable ist_bzahl entsprechend, d.h. true, wenn es sich um eine Binärzahl handelt, ansonsten false.

#include <stdio.h>

int main() {
  long bzahl;
  scanf("%li", &bzahl);
  
  bool ist_bzahl;
  //Hier ihr Programmcode
  
  printf("%i", ist_bzahl);
  
  return 0;
}


5.01:
------
Erstellen einer for-Schleife
Schreiben Sie eine for-Schleife, welche bei 0 anfängt zu zählen und in 3er Schritten bis zu der eingelesenen Grenze alle Werte gefolgt von einem Leerzeichen ausgibt.

#include <stdio.h>

int main() {
  int grenze;
  scanf("%i", &grenze);
  //Ab hier den Quelltext einfügen
  
  //
  return 0;
}

5.02:
------
Schleifen übersetzen
Wandeln Sie die gegebenen while-Schleifen in for-Schleifen um, sodass das Programm fehlerfrei übersetzbar ist.

#include <stdio.h>

int main() {
  /*
  int zaehler1 = 10;
  while (zaehler1 >= 1) {
      printf("%i ", zaehler1);
      zaehler1--;
  }
  */
  //Erste Schleife hier einfügen
  
  //
  printf("\n");
  /*
  int zaehler2 = 5;
  while (zaehler2 <= 60){
      printf("%i ", zaehler2);
      zaehler2 = zaehler2 + 5;
  }
  */
  //Zweite Schleife hier einfügen
  
  //
  
  return 0;
}

5.03:
------
For-Schleifen übersetzen
Wandeln Sie den gegebenen for-Schleifen in while-Schleifen um, sodass das Programm fehlerfrei übersetzbar ist.

#include <stdio.h>

int main() {
  int result = 0;
  int max;
  scanf("%i",&max);
  /*
  for(int i = 0; i<max; i+=3){
    result += i;
  }
  
  for(int u = 1; u<max; u++){
    result--;
  }
  */
  //Hier den Code einfügen
  
  //
  printf("%i",result);
  return 0;
}

5.04:
------
Guthaben berechnen
Die Höhe eines Sparguthabens und ein jährlicher Zinssatz (0%-100%) wird vom Benutzer eingelesen.

Berechnen Sie das Guthaben, welches entsteht, wenn der Sparbuchinhaber das Geld 10 Jahre auf seinem Konto liegen lässt. Beachten Sie den Zinseszins.

Nutzen Sie eine for-Schleife.

Geben Sie das Ergebnis aus.

#include <stdio.h>

int main() {
  double sparguthaben = 0;
  scanf("%lf", &sparguthaben);
  
  double zinssatz = 0;
  scanf("%lf", &zinssatz);
  
  //Quelltext ab hier
  
  
  //
  printf("%.2f", sparguthaben);
  return 0;
}

5.05:
------
Das kleine 1x1
Schreiben Sie ein Programm, welches das kleine 1x1 bis 10x10 ausgeben soll.

Geben Sie jede Reihe in der gleiche Zeile aus, getrennt durch ein einfaches Leerzeichen. Jede neue Reihe wird in einer neuen Zeile ausgegeben.

Beispiel:
1*1=1 1*2=2...
2*1=2 2*2=4...
...

Nutzen Sie geschachtelte Schleifen (for oder while).

#include <stdio.h>

int main() {
  //Quelltext ab hier
  
  //
  return 0;
}

5.06:
------
Quersumme berechnen
Schreiben Sie ein Programm, welches die Quersumme einer eingegebenen Zahl berechnet und ausgibt.

#include <stdio.h>

int main() {
  //Quelltext ab hier
  
  //
  return 0;
}

5.07:
------
Schachkoordinaten
Schreiben Sie ein Programm, welches die Koordinaten des Schachbrettes (8x8) erzeugt und ausgibt.

Die Ausgabe soll wie folgt aussehen:
A1 A2 A3 A4 A5 A6 A7 A8 
B1 B2 B3 B4 B5 B6 B7 B8 
C1 C2 C3 C4 C5 C6 C7 C8 
D1 D2 D3 D4 D5 D6 D7 D8 
E1 E2 E3 E4 E5 E6 E7 E8 
F1 F2 F3 F4 F5 F6 F7 F8 
G1 G2 G3 G4 G5 G6 G7 G8 
H1 H2 H3 H4 H5 H6 H7 H8 

#include <stdio.h>

int main() {
  //Quelltext ab hier

  //
  return 0;
}

6.01:
------
Funktionsaufrufe
Rufen Sie die Funktionen so auf, sodass der Benutzer zuerst begrüßt und anschließend verabschiedet wird.

#include <stdio.h>

void sagAufWiedersehen(){
    printf("Auf Wiedersehen!");
}

void sagHallo(){
    printf("Hallo, Gast. ");
}

int main() {
  //Quelltext ab hier
  
  //
  return 0;
}

6.02:
------
Funktionsparameter
Erweitern Sie die Funktion verdreifache, sodass sie eine Zahl (int) als Parameter entgegen nimmt, diese verdreifacht und anschließend zurückgibt.

#include <stdio.h>

int verdreifache() {
    
}

int main(){
  int zahl;
  scanf("%i",&zahl);
  printf("%i",verdreifache(zahl));
  
  return 0;
}

6.03:
------
Exponentialfunktion erstellen
Schreiben Sie eine Funktion exponential(x), welche näherungsweise e^x berechnet und zurückgibt. Nutzen Sie dazu die gegebene Konstante e.

Hinweis:
e³ = e * e * e

#include <stdio.h>

const double e = 2.718;

// Schreiben Sie hier die gesuchte Funktion:

int main(){
    int x;
    scanf("%i", &x);
    printf("%f", exponential(x));
    return 0;
}

6.04:
------
Fakultät-Funktion erstellen
Schreiben Sie eine Funktion fakultaet, welche die Fakultät der übergebenen Zahl (int) berechnet und zurückgibt.

Hinweis:
4! = 1 * 2 * 3 * 4

#include <stdio.h>

// Hier die Funktion schreiben:

int main(){
  int x;
  scanf("%i", &x);
  printf("%i", fakultaet(x));
  return 0;
}

6.05:
------
Nutzereingaben
Erstellen Sie eine Funktion "nutzereingabe", welche solange int-Zahlen von der Konsole einliest und durch ein Leerzeichen getrennt auch wieder ausgibt, bis eine Zahl zwischen 5 und 10 liegt (5 und 10 eingeschlossen).

#include <stdio.h>

// Hier die Funktion schreiben:

int main(){
  nutzereingabe();
  printf("ende");
  return 0;
}

6.06:
------
Primzahltest- Funktion
Schreiben Sie eine Funktion istPrimzahl, die eine übergebene Zahl (int) prüft, ob sie eine Primzahl ist oder nicht.

Ist es eine Primzahl, soll true, ansonsten false zurückgegeben werden.

#include <stdio.h>

// Hier die Funktion schreiben:

int main(){
    int zahl;
    scanf("%i", &zahl);
    printf("%i", istPrimzahl(zahl));
    return 0;
}

6.07:
------
Handytarife mittels Funktionen berechnen
In Aufgabe 3.12 haben Sie Rechnungsbeträge für unterschiedliche Handytarife berechnet.

Schreiben Sie für jeden Tarif eine eigene Funktion, welche die jeweiligen Kosten für die Tarife bei eingegebenen Minuten zurückgibt.

Tarif 1: Flatrate für 40€ im Monat
Tarif 2: 20 Inklusivminuten für 10€ pro Monat + 10 Cent pro Minute
Tarif 3: Keine Grundgebühr und 20 Cent pro Minute

#include <stdio.h>

// Hier die Funktionen:

int main() {
  int minuten;
  scanf("%i", &minuten);
  printf("Minuten: %i. Tarif 1: %.2f Euro. Tarif 2: %.2f Euro. Tarif 3: %.2f Euro\n", minuten, tarifEins(minuten), tarifZwei(minuten), tarifDrei(minuten));
  return 0;
}

7.01:
------
Array erstellen
Erstellen Sie ein Array mit der Größe 100 und belegen Sie dieses aufsteigend mit geraden Zahlen, angefangen mit der 2.

Geben Sie jedes Element einzeln, durch ein Leerzeichen getrennt, aus.

#include <stdio.h>

int main(){
  //Quelltext ab hier

  //
  return 0;
}

7.02:
------
Array-Elemente prüfen
Erweitern Sie das Programm, indem Sie prüfen, ob das gegebene Array a nur mit Zahlen belegt ist, die restfrei durch 3 teilbar sind.

Wenn alle Zahlen durch 3 teilbar sind, geben Sie "1", ansonsten "0" aus.

#include <stdio.h>

int main(){
  int a[10];
  for(int i = 0; i < 10; i++)
  {
      scanf("%i", &a[i]);
  }
  //Quelltext ab hier
  
  
  //
  return 0;
}

7.03:
------
Daten in ein Array einlesen
Erweitern Sie das Programm, sodass vom Benutzer 10 eingegebene int-Zahlen eingelesen und nacheinander in ein geeignetes Array geschrieben werden.

Geben Sie die Zahlen anschließend durch ein Leerzeichen getrennt aus.

#include <stdio.h>

int main(){
  //Quelltext ab hier
  
  
  //
  return 0;
}

7.04:
------
Array durchsuchen
Durchsuchen Sie das gegebene Array nach dem kleinsten und nach dem größten Element und geben Sie diese durch ein Leerzeichen getrennt aus. Hierbei soll das kleinste Element zuerst ausgegeben werden.

#include <stdio.h>

int main(){
  int a[7];
  for(int i = 0; i < 7; i++)
  {
      scanf("%i", &a[i]);
  }

  //Quelltext ab hier
  
  //
  return 0;
}

7.05:
------
Kopieren einer Matrix
Erweitern Sie das Programm, sodass der Inhalt der Matrix A in die Matrix B kopiert wird.

Benutzen Sie verschachtelte Schleifen!

#include <stdio.h>

int main(){
  int A[3][3]={15,22,73,-4,45,-956,75,1,-123};
  int B[3][3];

  //Quelltext ab hier
  
  
  //

  for(int i = 0;i<3;i++){
      for(int j = 0;j<3;j++){
          printf("%i ",B[i][j]);
      }
  }
  return 0;
}

7.06:
------
Matrizen addieren
Erweitern Sie das Programm derart, sodass die beiden Matrizen A und B elementweise addiert werden.

Das Ergebnis soll in der Matrix "C" abgelegt werden.

Nutzen Sie verschachtelte Schleifen!

#include <stdio.h>

int main(){
  int A[3][3]={1,2,3,4,5,6,7,8,9};
  int B[3][3]={4,2,-5,4,31,2,0,-4,8};
  int C[3][3];
  //Quelltext ab hier
  
  
  //
  printf("%i %i %i", C[0][1],C[1][1],C[2][0]);
  return 0;
}

7.07:
------
Tic-Tac-Toe
Erweitern Sie das Programm, sodass es bei einem Tic-Tac-Toe-Spielfeld überprüft, welcher Spieler gewonnen hat.

Wenn Spieler X gewinnt, soll ein einfaches X ausgegeben werden.

Wenn Spieler O (ein großes "o") gewinnt, soll ein O (ein großes "o") ausgegeben werden.

Wenn kein Spieler gewonnen hat, soll KEINER ausgegeben werden.

#include <stdio.h>

int main(){
  char t1[3][3];
  
  for(int i = 0;i<3;i++){
      for(int j = 0;j<3;j++){
          scanf("%c",&t1[i][j]);
      }
  }

  //Quelltext ab hier
  
  
  //

  return 0;
}

7.08:
------
Binär-Dezimal-Konverter
In das Array binaer wird eine Binärzahl aus 0 und 1 eingelesen. Erweitern Sie das Programm, sodass der zugehörige Dezimalwert berechnet wird.

Hinweis:
Die 0-te Stelle im Array repräsentiert dabei das niederwertigste Bit.

#include <stdio.h>
#include <math.h>

int main(){
  int binaer[10];
  scanf("%i %i %i %i %i %i %i %i %i %i", 
      &binaer[0], &binaer[1], &binaer[2], &binaer[3], 
      &binaer[4], &binaer[5], &binaer[6], &binaer[7], 
      &binaer[8], &binaer[9]);

  int dezimal = 0;
  //Quelltext ab hier
  
  
  //
  
  printf("%i", dezimal);
  return 0;
}

7.09:
------
Sortieren
Erweitern Sie das Programm, sodass die Elemente des Arrays Feld der Größe nach von klein nach groß sortiert werden.

Geben Sie anschließend alle Elemente des sortierten Arrays durch ein Leerzeichen getrennt aus.

Hinweis:
Sie können zum Sortieren der Liste einen einfachen Sortieralgorithmus wie Bubblesort oder Gnomesort umsetzen.
https://de.wikipedia.org/wiki/Bubblesort
https://de.wikipedia.org/wiki/Gnomesort

#include <stdio.h>

int main(){
  int arrSize=10;
  int Feld[arrSize];
  for(int i = 0; i<arrSize;i++){
      scanf("%i",Feld+i);
  }
  
  //Quelltext ab hier
  
  
  //
  
  for(int i = 0; i<arrSize;i++){
      printf("%i ",Feld[i]);
  }
  
  return 0;
}

7.10:
------
Zeichenkette trennen
Der Text in der Variable text soll zeilenweise ausgegeben werden. Der Zeilenumbruch soll beim Trennzeichen ";" durchgeführt werden. Das Trennzeichen soll von der Ausgabe ausgeschlossen werden.

Beispiel:
input: "Hallo;Welt"
output: "Hallo\nWelt"

#include <stdio.h>

int main(){
  char text[] = "Intelligent;Systems;Design";
  
  for(int i = 0; i<26; i++) {
      //Quelltext ab hier

      //
  }
  return 0;
}

7.11:
------
Vokale zählen
Erweitern Sie die beiden Funktionen anzahlVokale und istVokal so, sodass für einen beliebigen Text die Anzahl der Vokale gezählt werden kann.

Hinweis:
Das Ende einer Zeichenkette wird durch das ASCII-Zeichen mit dem Wert 0 angezeigt.

#include <stdio.h>

bool istVokal(char buchstabe) {
  // Hier ihre Lösung
  
}

int anzahlVokale(char text[]){
  // Hier Ihre Lösung
  
}

int main() {
  char text[100];
  scanf("%s", text);
  printf("%i", anzahlVokale(text));
  return 0;
}

7.12:
------
Palindrom prüfen
Erweitern Sie die Funktion istPalindrom so, sodass diese prüft, ob ein übergebenes Wort ein Palindrom ist. Bei einem Palindrom soll ein true, bei jedem anderen Wort ein false zurückgegeben werden.

Info:
Ein Palindrom ist ein Wort, welches man sowohl rückwärts, als auch vorwärts lesen kann.

#include <stdio.h>

bool istPalindrom(char text[],int length){
  //Quelltext ab hier
  
  //
}

int main(){
  int length;
  scanf("%i ",&length);
  
  char text[length];
  
  for(int i = 0; i < length; i++){
      scanf("%c",&text[i]);
  }

  printf("%i",istPalindrom(text,length));
  return 0;
}

7.13:
------
Text umwandeln
Erweitern Sie die Funktion grossSchrift so, dass diese den übergebenen Text in Grossschrift umwandelt. Der gewandelte Text soll im Array ausgabe abgelegt werden.

Verwenden Sie zur Umwandlung der Buchstaben die ASCII Tabelle unter:
http://www.asciitable.com/

#include <stdio.h>

void grossSchrift(char eingabe[], char ausgabe[]) {
  //Quelltext ab hier
  
  //
}

int main() {
  char text[100];
  scanf("%s", text);
  char ergebnis[100];
  grossSchrift(text, ergebnis);
  printf("%s", ergebnis);
  return 0;
}

7.14:
------
Textverschlüsselung
ROT13 ist eine einfache Verschlüsselungsmethode, bei der die Buchstaben um 13 Plätze im Alphabet rotiert werden.

Beispiel:
Aus N wird A und aus B wird O.

Erweitern Sie die Funktion rotDreizehn so, dass der übergebene Buchstabe entsprechend ersetzt wird.

Info:
Es werden nur Großbuchstaben übergeben!

Bitte denken Sie daran, dass in der Ausgabe auch die Markierung für das Textende gesetzt werden muss!

#include <stdio.h>

void rotDreizehn(char eingabe[], char ausgabe[]) {
  //Quelltext ab hier
  
  //
}

int main() {
  char eingabe[100];
  char ausgabe[100];
  scanf("%s", eingabe);
  rotDreizehn(eingabe, ausgabe);
  printf("%s", ausgabe);
  
  return 0;
}

7.15:
------
Wort finden
Schreiben Sie eine Funktion, die in einem char-Array das Wort Fanta sucht und die Position des ersten Buchstaben ('F') auf der Konsole ausgibt.
Ist das Wort nicht in dem gegebenen Text enthalten, so soll -1 (minus eins) zurückgegeben werden.

#include <stdio.h>
//Quelltext ab hier

//
int main(){
  int length;
  scanf("%i ",&length);
  char text[length];
  for(int i = 0; i<length;i++){
    scanf("%c",&text[i]);
  }
  
  //Rufen Sie hier die Funktion auf und geben Sie das Ergebnis aus

  return 0;
}

7.16:
------
Buchstabenverteilung
Erweitern Sie die Funktion buchstabenVerteilung. Diese Funktion soll in einem Array[26] die Häufigkeit der einzelnen Buchstaben (nur Grossbuchstaben) zählen.
verteilung[0] steht dabei für "A", verteilung[1] für "B" usw.
Anschließend soll die Verteilung durch ein Leerzeichen getrennt ausgegeben werden.

#include <stdio.h>

void buchstabenVerteilung(char text[], int verteilung[]) {
  //Quelltext ab hier

  //
}

int main(){
  char text[]= "MAFVXCLPOKISDBYQURDKCFKJLGPPPXVCASFHUBXNYXCWERSTAOZUXCVLK";
  int verteilung[26];
  buchstabenVerteilung(text, verteilung);
  
  // Hier die Ausgabe:
  
  return 0;
}

8.01:
------
Verwendung von Zeigern
Das nebenstehende Programm soll eine Zahlenfolge ab einer eingelesenen Grenze ausgeben. Bei der Benutzung von Zeigern ist etwas schief gelaufen. Bitte korrigieren Sie alle Fehler!

Beispiel für eine erzeugte Zahlenfolge:
2 4 8 14 22 

#include <stdio.h>

int main(){
  int x;
  scanf("%c",x);
  int *a = x;
  
  for(int i = 0; i<10; i+=2){
    a+=i;
    printf("%b ",&a);
  }
  
  return 0;
}

8.02:
------
Zeigeraddition
Erweitern Sie das nebenstehende Programm, sodass die Summe von A und B mittels Zeiger zA und zB gebildet und ausgegeben wird.
Beachten Sie bei der Ausgabe, dass sie ein Leerzeichen nach der Zahl einfügen.

#include <stdio.h>

int main(){
  int A,B;
  int *zA = &A;
  int *zB = &B;

  for(int i = 0; i<3; i++){
    scanf("%i %i",&A,&B);
    //Quelltext ab hier
    
    //
  }
  return 0;
}

8.03:
------
Werte mittels Zeiger verändern
Erstellen Sie zu jeder vorhandenen Variable einen Zeiger.
Inkrementieren Sie anschließend mittels der Zeiger den Wert der ursprünglichen Variable um 10.

#include <stdio.h>

int main(){
  int A,B,C,D,E;
  scanf("%i %i %i %i %i",&A,&B,&C,&D,&E);
  //Quelltext ab hier
  
  //
  printf("%i %i %i %i %i",A,B,C,D,E);
  return 0;
}

8.04:
------
Wertetausch mit Zeigern
Erweitern Sie die Funktion tauscheInhalt, sodass diese zwei int-Zeiger als Parameter erhält. Mithilfe dieser Zeiger soll der Inhalt der verwiesenen Variablen getauscht werden.

#include <stdio.h>

void tauscheInhalt(){
  
}

int main(){
  int A,B;
  scanf("%i %i",&A,&B);
  int *zA = &A;
  int *zB = &B;
  //Quelltext ab hier
  
  //
  printf("%i %i",A,B);
  return 0;
}

8.05:
------
Array umdrehen
Erweitern Sie das Programm derart, sodass mithilfe der Zeiger zAnfang und zEnde die Reihenfolge der Daten im Array umgedreht wird.

#include <stdio.h>

int main(){
  int A[10] = {4,6,45,4,-21,5,-7,12,-9,-2};
  int *zAnfang = &A[0];
  int *zEnde = &A[9];
  //Quelltext ab hier
  
  
  //
  for(int i = 0; i<10; i++){
    printf("%i ",A[i]);
  }
  return 0;
}

9.01:
------
Structs
Der nebenstehende Quellcode enthält den Verbund (struct) person, welcher den Namen, den Vornamen und das Alter beinhaltet. Allerdings haben sich einige Fehler eingeschlichen. Korrigieren Sie das Programm, sodass für die folgenden zwei Personen diese Daten angelegt und ausgegeben werden:
Hans Meier, 68 Jahre alt.
Peter Parker, 20 Jahre alt.

Die Ausgabe der einzelnen Personen ist mit einem Zeilenumbruch zu trennen.

#include <stdio.h>

int main(void)
{
  struct person {
    char vorname[20];
    char name[20];
    int alter;
  } 
  
  person p1 = {"Hans", "Meier", 68},

  person pp = {"Peter", "Park", 25};

  p2->alter = 21;
  
  printf("%s %c ist %i Jahre alt.", p1.vorname, p1.name, p1.alter); 
  printf("%s %c ist %i Jahre alt.", p2.vorname, p2.name, p1.alter); 

  return 0;
}

9.02:
------
Kreis als Verbund
Erstellen Sie einen struct Rechteck. Ein Rechteck besitzt zwei Seitenlängen (Seite1 und Seite2) vom Typ double.

Erstellen Sie des Weiteren zwei Funktionen, welche den Flächeninhalt und den Umfang eines übergebenen Rechtecks berechnen. Geben Sie die Ergebnisse auf der Konsole aus.

Beispiel einer Ausgabe:
Flaeche: 15.00000
Umfang: 16.00000

#include <stdio.h>
#include <stdlib.h>

struct Rechteck {
  
}; 

// Erstellen Sie hier die Funktionen

//

int main() {
  double seite1 = 0;
  scanf("%lf", &seite1);
  double seite2 = 0;
  scanf("%lf", &seite2);
  
  // Erzeugen Sie ein Variable vom Typ Rechteck mit den beiden Seitenlängen

  // Geben Sie hier die Flaeche und den Umfang des Rechtecks aus

  return 0;
}

9.03:
------
Dreieck mittels struct abbilden
Definieren Sie ein struct, welches die Seitenlängen eines Dreiecks (a, b, c) aufnehmen kann. Schreiben Sie des Weiteren eine Funktion, welche anhand der übergebenen Struktur den Umfang des Dreiecks berechnet. Geben Sie die Lösung aus.

#include <stdio.h>

//Hier soll Ihr struct stehen


// Erstellen Sie hier die Funktion zur Berechnung des Umfangs
    


int main() {
  
  double Seitenlaenge_a = 0;
  double Seitenlaenge_b = 0;
  double Seitenlaenge_c = 0;
  
  scanf("%lf %lf %lf", &Seitenlaenge_a, &Seitenlaenge_b, &Seitenlaenge_c);
  
  
  //Erzeugen Sie ein Dreieck

  //Geben Sie hier den Umfang des Dreiecks aus
  printf("Das Dreieck mit den Seitenlaengen %.2f Meter, %.2f Meter und %.2f Meter besitzt einen Umfang von %.2f Metern.",);

  return 0;
}

9.04:
------
Array dynamisch allozieren
Das folgende Programm wurde konzipiert, um (Pseudo-)Zufallszahlen zu generieren. Diese erzeugten Zahlen sollen in ein Array gespeichert werden. Dabei ist die Anzahl der (Pseudo-)Zufallszahlen erst zur Laufzeit bekannt. Vervollständigen Sie das Programm entsprechend, damit die Zufallszahlen in einem dynamischen Array gespeichert werden. Dabei soll innerhalb der for-Schleife die Funktion Gebe_Zahlen mit der mittels scanf eingelesenen Variable index genutzt werden, um das Array zu befüllen. Anschließend sollen die Zahlen im Array in umgekehrter Reihenfolge durch ein Leerzeichen getrennt ausgegeben werden.

Hinweis:
Denken Sie daran den reservierten Speicher wieder freizugeben!

#include <stdio.h>

int Gebe_Zahlen(int Index)
{
  if(Index < 0 || Index >= 9)
  {
    return 0;
  }
  
  int zahlenArray[9] = {7,4,1,8,5,2,9,6,3};
  
  return zahlenArray[Index];
}

int main() 
{
  int AnzahlArrayElemente = 0;
  
  scanf("%d", &AnzahlArrayElemente);
  
  int *zufallszahlen = 0;
  
 // erzeugen Sie an dieser Stelle das Array
  
  if(zufallszahlen != 0)
  {
    // Vervollständigen Sie die for-Schleife
    for ()  
    {
      int index = 0;
      scanf("%d", &index);
    }

    // Geben Sie die Zahlen in umgekehrter Reihenfolge aus 
  }

 
  // geben Sie den Speicher frei
  
  zufallszahlen = 0;
  
  return 0;
}

9.05:
------
Array dynamisch allozieren
Das folgende Programm wurde konzipiert, um (Pseudo-)Zufallszahlen zu generieren. Diese erzeugten Zahlen sollen in ein Array gespeichert werden. Dabei ist die Anzahl der (Pseudo-)Zufallszahlen erst zur Laufzeit bekannt. Vervollständigen Sie das Programm entsprechend, damit die Zufallszahlen in einem dynamischen Array gespeichert werden. Dabei soll innerhalb der for-Schleife die Funktion Gebe_Zahlen mit der mittels scanf eingelesenen Variable index genutzt werden, um das Array zu befüllen. Anschließend sollen die Zahlen im Array in umgekehrter Reihenfolge durch ein Leerzeichen getrennt ausgegeben werden.

Hinweis:
Denken Sie daran den reservierten Speicher wieder freizugeben!

#include <stdio.h>

int Gebe_Zahlen(int Index)
{
  if(Index < 0 || Index >= 9)
  {
    return 0;
  }
  
  int zahlenArray[9] = {7,4,1,8,5,2,9,6,3};
  
  return zahlenArray[Index];
}

int main() 
{
  int AnzahlArrayElemente = 0;
  
  scanf("%d", &AnzahlArrayElemente);
  
  int *zufallszahlen = 0;
  
 // erzeugen Sie an dieser Stelle das Array
  
  if(zufallszahlen != 0)
  {
    // Vervollständigen Sie die for-Schleife
    for ()  
    {
      int index = 0;
      scanf("%d", &index);
    }

    // Geben Sie die Zahlen in umgekehrter Reihenfolge aus 
  }

 
  // geben Sie den Speicher frei
  
  zufallszahlen = 0;
  
  return 0;
}
