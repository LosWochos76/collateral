6.06:
------
Primzahltest- Funktion
Schreiben Sie eine Funktion istPrimzahl, die eine übergebene Zahl (int) prüft, ob sie eine Primzahl ist oder nicht.

Ist es eine Primzahl, soll true, ansonsten false zurückgegeben werden.

#include <stdio.h>

// Hier die Funktion schreiben:

int main(){
    int zahl;
    scanf("%i", &zahl);
    printf("%i", istPrimzahl(zahl));
    return 0;
}

6.07:
------
Handytarife mittels Funktionen berechnen
In Aufgabe 3.12 haben Sie Rechnungsbeträge für unterschiedliche Handytarife berechnet.

Schreiben Sie für jeden Tarif eine eigene Funktion, welche die jeweiligen Kosten für die Tarife bei eingegebenen Minuten zurückgibt.

Tarif 1: Flatrate für 40€ im Monat
Tarif 2: 20 Inklusivminuten für 10€ pro Monat + 10 Cent pro Minute
Tarif 3: Keine Grundgebühr und 20 Cent pro Minute

#include <stdio.h>

// Hier die Funktionen:

int main() {
  int minuten;
  scanf("%i", &minuten);
  printf("Minuten: %i. Tarif 1: %.2f Euro. Tarif 2: %.2f Euro. Tarif 3: %.2f Euro\n", minuten, tarifEins(minuten), tarifZwei(minuten), tarifDrei(minuten));
  return 0;
}

7.01:
------
Array erstellen
Erstellen Sie ein Array mit der Größe 100 und belegen Sie dieses aufsteigend mit geraden Zahlen, angefangen mit der 2.

Geben Sie jedes Element einzeln, durch ein Leerzeichen getrennt, aus.

#include <stdio.h>

int main(){
  //Quelltext ab hier

  //
  return 0;
}

7.02:
------
Array-Elemente prüfen
Erweitern Sie das Programm, indem Sie prüfen, ob das gegebene Array a nur mit Zahlen belegt ist, die restfrei durch 3 teilbar sind.

Wenn alle Zahlen durch 3 teilbar sind, geben Sie "1", ansonsten "0" aus.

#include <stdio.h>

int main(){
  int a[10];
  for(int i = 0; i < 10; i++)
  {
      scanf("%i", &a[i]);
  }
  //Quelltext ab hier
  
  
  //
  return 0;
}

7.03:
------
Daten in ein Array einlesen
Erweitern Sie das Programm, sodass vom Benutzer 10 eingegebene int-Zahlen eingelesen und nacheinander in ein geeignetes Array geschrieben werden.

Geben Sie die Zahlen anschließend durch ein Leerzeichen getrennt aus.

#include <stdio.h>

int main(){
  //Quelltext ab hier
  
  
  //
  return 0;
}

7.04:
------
Array durchsuchen
Durchsuchen Sie das gegebene Array nach dem kleinsten und nach dem größten Element und geben Sie diese durch ein Leerzeichen getrennt aus. Hierbei soll das kleinste Element zuerst ausgegeben werden.

#include <stdio.h>

int main(){
  int a[7];
  for(int i = 0; i < 7; i++)
  {
      scanf("%i", &a[i]);
  }

  //Quelltext ab hier
  
  //
  return 0;
}

7.05:
------
Kopieren einer Matrix
Erweitern Sie das Programm, sodass der Inhalt der Matrix A in die Matrix B kopiert wird.

Benutzen Sie verschachtelte Schleifen!

#include <stdio.h>

int main(){
  int A[3][3]={15,22,73,-4,45,-956,75,1,-123};
  int B[3][3];

  //Quelltext ab hier
  
  
  //

  for(int i = 0;i<3;i++){
      for(int j = 0;j<3;j++){
          printf("%i ",B[i][j]);
      }
  }
  return 0;
}

7.06:
------
Matrizen addieren
Erweitern Sie das Programm derart, sodass die beiden Matrizen A und B elementweise addiert werden.

Das Ergebnis soll in der Matrix "C" abgelegt werden.

Nutzen Sie verschachtelte Schleifen!

#include <stdio.h>

int main(){
  int A[3][3]={1,2,3,4,5,6,7,8,9};
  int B[3][3]={4,2,-5,4,31,2,0,-4,8};
  int C[3][3];
  //Quelltext ab hier
  
  
  //
  printf("%i %i %i", C[0][1],C[1][1],C[2][0]);
  return 0;
}

7.07:
------
Tic-Tac-Toe
Erweitern Sie das Programm, sodass es bei einem Tic-Tac-Toe-Spielfeld überprüft, welcher Spieler gewonnen hat.

Wenn Spieler X gewinnt, soll ein einfaches X ausgegeben werden.

Wenn Spieler O (ein großes "o") gewinnt, soll ein O (ein großes "o") ausgegeben werden.

Wenn kein Spieler gewonnen hat, soll KEINER ausgegeben werden.

#include <stdio.h>

int main(){
  char t1[3][3];
  
  for(int i = 0;i<3;i++){
      for(int j = 0;j<3;j++){
          scanf("%c",&t1[i][j]);
      }
  }

  //Quelltext ab hier
  
  
  //

  return 0;
}

7.08:
------
Binär-Dezimal-Konverter
In das Array binaer wird eine Binärzahl aus 0 und 1 eingelesen. Erweitern Sie das Programm, sodass der zugehörige Dezimalwert berechnet wird.

Hinweis:
Die 0-te Stelle im Array repräsentiert dabei das niederwertigste Bit.

#include <stdio.h>
#include <math.h>

int main(){
  int binaer[10];
  scanf("%i %i %i %i %i %i %i %i %i %i", 
      &binaer[0], &binaer[1], &binaer[2], &binaer[3], 
      &binaer[4], &binaer[5], &binaer[6], &binaer[7], 
      &binaer[8], &binaer[9]);

  int dezimal = 0;
  //Quelltext ab hier
  
  
  //
  
  printf("%i", dezimal);
  return 0;
}

7.09:
------
Sortieren
Erweitern Sie das Programm, sodass die Elemente des Arrays Feld der Größe nach von klein nach groß sortiert werden.

Geben Sie anschließend alle Elemente des sortierten Arrays durch ein Leerzeichen getrennt aus.

Hinweis:
Sie können zum Sortieren der Liste einen einfachen Sortieralgorithmus wie Bubblesort oder Gnomesort umsetzen.
https://de.wikipedia.org/wiki/Bubblesort
https://de.wikipedia.org/wiki/Gnomesort

#include <stdio.h>

int main(){
  int arrSize=10;
  int Feld[arrSize];
  for(int i = 0; i<arrSize;i++){
      scanf("%i",Feld+i);
  }
  
  //Quelltext ab hier
  
  
  //
  
  for(int i = 0; i<arrSize;i++){
      printf("%i ",Feld[i]);
  }
  
  return 0;
}

7.10:
------
Zeichenkette trennen
Der Text in der Variable text soll zeilenweise ausgegeben werden. Der Zeilenumbruch soll beim Trennzeichen ";" durchgeführt werden. Das Trennzeichen soll von der Ausgabe ausgeschlossen werden.

Beispiel:
input: "Hallo;Welt"
output: "Hallo\nWelt"

#include <stdio.h>

int main(){
  char text[] = "Intelligent;Systems;Design";
  
  for(int i = 0; i<26; i++) {
      //Quelltext ab hier

      //
  }
  return 0;
}

7.11:
------
Vokale zählen
Erweitern Sie die beiden Funktionen anzahlVokale und istVokal so, sodass für einen beliebigen Text die Anzahl der Vokale gezählt werden kann.

Hinweis:
Das Ende einer Zeichenkette wird durch das ASCII-Zeichen mit dem Wert 0 angezeigt.

#include <stdio.h>

bool istVokal(char buchstabe) {
  // Hier ihre Lösung
  
}

int anzahlVokale(char text[]){
  // Hier Ihre Lösung
  
}

int main() {
  char text[100];
  scanf("%s", text);
  printf("%i", anzahlVokale(text));
  return 0;
}

7.12:
------
Palindrom prüfen
Erweitern Sie die Funktion istPalindrom so, sodass diese prüft, ob ein übergebenes Wort ein Palindrom ist. Bei einem Palindrom soll ein true, bei jedem anderen Wort ein false zurückgegeben werden.

Info:
Ein Palindrom ist ein Wort, welches man sowohl rückwärts, als auch vorwärts lesen kann.

#include <stdio.h>

bool istPalindrom(char text[],int length){
  //Quelltext ab hier
  
  //
}

int main(){
  int length;
  scanf("%i ",&length);
  
  char text[length];
  
  for(int i = 0; i < length; i++){
      scanf("%c",&text[i]);
  }

  printf("%i",istPalindrom(text,length));
  return 0;
}

7.13:
------
Text umwandeln
Erweitern Sie die Funktion grossSchrift so, dass diese den übergebenen Text in Grossschrift umwandelt. Der gewandelte Text soll im Array ausgabe abgelegt werden.

Verwenden Sie zur Umwandlung der Buchstaben die ASCII Tabelle unter:
http://www.asciitable.com/

#include <stdio.h>

void grossSchrift(char eingabe[], char ausgabe[]) {
  //Quelltext ab hier
  
  //
}

int main() {
  char text[100];
  scanf("%s", text);
  char ergebnis[100];
  grossSchrift(text, ergebnis);
  printf("%s", ergebnis);
  return 0;
}

7.14:
------
Textverschlüsselung
ROT13 ist eine einfache Verschlüsselungsmethode, bei der die Buchstaben um 13 Plätze im Alphabet rotiert werden.

Beispiel:
Aus N wird A und aus B wird O.

Erweitern Sie die Funktion rotDreizehn so, dass der übergebene Buchstabe entsprechend ersetzt wird.

Info:
Es werden nur Großbuchstaben übergeben!

Bitte denken Sie daran, dass in der Ausgabe auch die Markierung für das Textende gesetzt werden muss!

#include <stdio.h>

void rotDreizehn(char eingabe[], char ausgabe[]) {
  //Quelltext ab hier
  
  //
}

int main() {
  char eingabe[100];
  char ausgabe[100];
  scanf("%s", eingabe);
  rotDreizehn(eingabe, ausgabe);
  printf("%s", ausgabe);
  
  return 0;
}

7.15:
------
Wort finden
Schreiben Sie eine Funktion, die in einem char-Array das Wort Fanta sucht und die Position des ersten Buchstaben ('F') auf der Konsole ausgibt.
Ist das Wort nicht in dem gegebenen Text enthalten, so soll -1 (minus eins) zurückgegeben werden.

#include <stdio.h>
//Quelltext ab hier

//
int main(){
  int length;
  scanf("%i ",&length);
  char text[length];
  for(int i = 0; i<length;i++){
    scanf("%c",&text[i]);
  }
  
  //Rufen Sie hier die Funktion auf und geben Sie das Ergebnis aus

  return 0;
}

7.16:
------
Buchstabenverteilung
Erweitern Sie die Funktion buchstabenVerteilung. Diese Funktion soll in einem Array[26] die Häufigkeit der einzelnen Buchstaben (nur Grossbuchstaben) zählen.
verteilung[0] steht dabei für "A", verteilung[1] für "B" usw.
Anschließend soll die Verteilung durch ein Leerzeichen getrennt ausgegeben werden.

#include <stdio.h>

void buchstabenVerteilung(char text[], int verteilung[]) {
  //Quelltext ab hier

  //
}

int main(){
  char text[]= "MAFVXCLPOKISDBYQURDKCFKJLGPPPXVCASFHUBXNYXCWERSTAOZUXCVLK";
  int verteilung[26];
  buchstabenVerteilung(text, verteilung);
  
  // Hier die Ausgabe:
  
  return 0;
}

8.01:
------
Verwendung von Zeigern
Das nebenstehende Programm soll eine Zahlenfolge ab einer eingelesenen Grenze ausgeben. Bei der Benutzung von Zeigern ist etwas schief gelaufen. Bitte korrigieren Sie alle Fehler!

Beispiel für eine erzeugte Zahlenfolge:
2 4 8 14 22 

#include <stdio.h>

int main(){
  int x;
  scanf("%c",x);
  int *a = x;
  
  for(int i = 0; i<10; i+=2){
    a+=i;
    printf("%b ",&a);
  }
  
  return 0;
}

8.02:
------
Zeigeraddition
Erweitern Sie das nebenstehende Programm, sodass die Summe von A und B mittels Zeiger zA und zB gebildet und ausgegeben wird.
Beachten Sie bei der Ausgabe, dass sie ein Leerzeichen nach der Zahl einfügen.

#include <stdio.h>

int main(){
  int A,B;
  int *zA = &A;
  int *zB = &B;

  for(int i = 0; i<3; i++){
    scanf("%i %i",&A,&B);
    //Quelltext ab hier
    
    //
  }
  return 0;
}

8.03:
------
Werte mittels Zeiger verändern
Erstellen Sie zu jeder vorhandenen Variable einen Zeiger.
Inkrementieren Sie anschließend mittels der Zeiger den Wert der ursprünglichen Variable um 10.

#include <stdio.h>

int main(){
  int A,B,C,D,E;
  scanf("%i %i %i %i %i",&A,&B,&C,&D,&E);
  //Quelltext ab hier
  
  //
  printf("%i %i %i %i %i",A,B,C,D,E);
  return 0;
}

8.04:
------
Wertetausch mit Zeigern
Erweitern Sie die Funktion tauscheInhalt, sodass diese zwei int-Zeiger als Parameter erhält. Mithilfe dieser Zeiger soll der Inhalt der verwiesenen Variablen getauscht werden.

#include <stdio.h>

void tauscheInhalt(){
  
}

int main(){
  int A,B;
  scanf("%i %i",&A,&B);
  int *zA = &A;
  int *zB = &B;
  //Quelltext ab hier
  
  //
  printf("%i %i",A,B);
  return 0;
}

8.05:
------
Array umdrehen
Erweitern Sie das Programm derart, sodass mithilfe der Zeiger zAnfang und zEnde die Reihenfolge der Daten im Array umgedreht wird.

#include <stdio.h>

int main(){
  int A[10] = {4,6,45,4,-21,5,-7,12,-9,-2};
  int *zAnfang = &A[0];
  int *zEnde = &A[9];
  //Quelltext ab hier
  
  
  //
  for(int i = 0; i<10; i++){
    printf("%i ",A[i]);
  }
  return 0;
}

9.01:
------
Structs
Der nebenstehende Quellcode enthält den Verbund (struct) person, welcher den Namen, den Vornamen und das Alter beinhaltet. Allerdings haben sich einige Fehler eingeschlichen. Korrigieren Sie das Programm, sodass für die folgenden zwei Personen diese Daten angelegt und ausgegeben werden:
Hans Meier, 68 Jahre alt.
Peter Parker, 20 Jahre alt.

Die Ausgabe der einzelnen Personen ist mit einem Zeilenumbruch zu trennen.

#include <stdio.h>

int main(void)
{
  struct person {
    char vorname[20];
    char name[20];
    int alter;
  } 
  
  person p1 = {"Hans", "Meier", 68},

  person pp = {"Peter", "Park", 25};

  p2->alter = 21;
  
  printf("%s %c ist %i Jahre alt.", p1.vorname, p1.name, p1.alter); 
  printf("%s %c ist %i Jahre alt.", p2.vorname, p2.name, p1.alter); 

  return 0;
}

9.02:
------
Kreis als Verbund
Erstellen Sie einen struct Rechteck. Ein Rechteck besitzt zwei Seitenlängen (Seite1 und Seite2) vom Typ double.

Erstellen Sie des Weiteren zwei Funktionen, welche den Flächeninhalt und den Umfang eines übergebenen Rechtecks berechnen. Geben Sie die Ergebnisse auf der Konsole aus.

Beispiel einer Ausgabe:
Flaeche: 15.00000
Umfang: 16.00000

#include <stdio.h>
#include <stdlib.h>

struct Rechteck {
  
}; 

// Erstellen Sie hier die Funktionen

//

int main() {
  double seite1 = 0;
  scanf("%lf", &seite1);
  double seite2 = 0;
  scanf("%lf", &seite2);
  
  // Erzeugen Sie ein Variable vom Typ Rechteck mit den beiden Seitenlängen

  // Geben Sie hier die Flaeche und den Umfang des Rechtecks aus

  return 0;
}

9.03:
------
Dreieck mittels struct abbilden
Definieren Sie ein struct, welches die Seitenlängen eines Dreiecks (a, b, c) aufnehmen kann. Schreiben Sie des Weiteren eine Funktion, welche anhand der übergebenen Struktur den Umfang des Dreiecks berechnet. Geben Sie die Lösung aus.

#include <stdio.h>

//Hier soll Ihr struct stehen


// Erstellen Sie hier die Funktion zur Berechnung des Umfangs
    


int main() {
  
  double Seitenlaenge_a = 0;
  double Seitenlaenge_b = 0;
  double Seitenlaenge_c = 0;
  
  scanf("%lf %lf %lf", &Seitenlaenge_a, &Seitenlaenge_b, &Seitenlaenge_c);
  
  
  //Erzeugen Sie ein Dreieck

  //Geben Sie hier den Umfang des Dreiecks aus
  printf("Das Dreieck mit den Seitenlaengen %.2f Meter, %.2f Meter und %.2f Meter besitzt einen Umfang von %.2f Metern.",);

  return 0;
}

9.04:
------
Array dynamisch allozieren
Das folgende Programm wurde konzipiert, um (Pseudo-)Zufallszahlen zu generieren. Diese erzeugten Zahlen sollen in ein Array gespeichert werden. Dabei ist die Anzahl der (Pseudo-)Zufallszahlen erst zur Laufzeit bekannt. Vervollständigen Sie das Programm entsprechend, damit die Zufallszahlen in einem dynamischen Array gespeichert werden. Dabei soll innerhalb der for-Schleife die Funktion Gebe_Zahlen mit der mittels scanf eingelesenen Variable index genutzt werden, um das Array zu befüllen. Anschließend sollen die Zahlen im Array in umgekehrter Reihenfolge durch ein Leerzeichen getrennt ausgegeben werden.

Hinweis:
Denken Sie daran den reservierten Speicher wieder freizugeben!

#include <stdio.h>

int Gebe_Zahlen(int Index)
{
  if(Index < 0 || Index >= 9)
  {
    return 0;
  }
  
  int zahlenArray[9] = {7,4,1,8,5,2,9,6,3};
  
  return zahlenArray[Index];
}

int main() 
{
  int AnzahlArrayElemente = 0;
  
  scanf("%d", &AnzahlArrayElemente);
  
  int *zufallszahlen = 0;
  
 // erzeugen Sie an dieser Stelle das Array
  
  if(zufallszahlen != 0)
  {
    // Vervollständigen Sie die for-Schleife
    for ()  
    {
      int index = 0;
      scanf("%d", &index);
    }

    // Geben Sie die Zahlen in umgekehrter Reihenfolge aus 
  }

 
  // geben Sie den Speicher frei
  
  zufallszahlen = 0;
  
  return 0;
}

9.05:
------
Array dynamisch allozieren
Das folgende Programm wurde konzipiert, um (Pseudo-)Zufallszahlen zu generieren. Diese erzeugten Zahlen sollen in ein Array gespeichert werden. Dabei ist die Anzahl der (Pseudo-)Zufallszahlen erst zur Laufzeit bekannt. Vervollständigen Sie das Programm entsprechend, damit die Zufallszahlen in einem dynamischen Array gespeichert werden. Dabei soll innerhalb der for-Schleife die Funktion Gebe_Zahlen mit der mittels scanf eingelesenen Variable index genutzt werden, um das Array zu befüllen. Anschließend sollen die Zahlen im Array in umgekehrter Reihenfolge durch ein Leerzeichen getrennt ausgegeben werden.

Hinweis:
Denken Sie daran den reservierten Speicher wieder freizugeben!

#include <stdio.h>

int Gebe_Zahlen(int Index)
{
  if(Index < 0 || Index >= 9)
  {
    return 0;
  }
  
  int zahlenArray[9] = {7,4,1,8,5,2,9,6,3};
  
  return zahlenArray[Index];
}

int main() 
{
  int AnzahlArrayElemente = 0;
  
  scanf("%d", &AnzahlArrayElemente);
  
  int *zufallszahlen = 0;
  
 // erzeugen Sie an dieser Stelle das Array
  
  if(zufallszahlen != 0)
  {
    // Vervollständigen Sie die for-Schleife
    for ()  
    {
      int index = 0;
      scanf("%d", &index);
    }

    // Geben Sie die Zahlen in umgekehrter Reihenfolge aus 
  }

 
  // geben Sie den Speicher frei
  
  zufallszahlen = 0;
  
  return 0;
}
